Tasks
//1. Create a collection named orders.
db.createCollection('orders')


//2. Insert at least 3 documents that represent an order. IMPORTANT: See section below for fields.
db.orders.insert({orderDate: 'new Date()', orderTotal: '40', lineItems: [{unitPrice: 40}, {quantity: 300}, {productName: "Product"}]})
db.orders.insert({orderDate: 'new Date(1999-01-01)', orderTotal: '140', lineItems: [{unitPrice: 400}, {quantity: 90}, {productName: "Product2"}]})
db.orders.insert({orderDate: 'new Date(2008-08-12)', orderTotal: '20', lineItems: [{unitPrice: 19}, {quantity: 7}, {productName: "Product3"}]})

//3. Find a single order document, any order document.
db.orders.find({"orderTotal": /20/}).pretty()

//4. Find all orders and make them look pretty.
db.orders.find().pretty()

//5. Find all orders with an orderDate that is prior to 1/1/2016.
db.orders.find({"orderDate": {$lt: "new Date(2016-01-01)"}})


//6. Find all orders with an orderDate that is after 1/1/2016.
db.orders.find({"orderDate": {$gt: "new Date(2016-01-01)"}}).pretty()


//7. Find orders with lineItems that have a quantity that is less than 50, but greater than 5. HINT: Look at $and and dot notation.
db.orders.find({$and: [{"lineItems.quantity": {$lt: 50}}, {"lineItems.quantity": {$gt: 5}}]})


//8. Update one of your line items to 42.99. HINT: Look at dot notation
db.orders.update({"lineItems.quantity": {$gt: 50}}, {$set: {"lineItems.$.productName": 42.99}})



//9. Remove one of your orders.
db.orders.remove({"lineItems.productName": 42.99})
